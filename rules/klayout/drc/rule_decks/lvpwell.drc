################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

if FEOL
    lvpwell_dn_56V = lvpwell_dn.interacting(dualgate)

    #================================================
    #--------------------LVPWELL---------------------
    #================================================

    # Rule LPW.1_3.3V: Min. LVPWELL Width. is 0.6µm
    logger.info("Executing rule LPW.1_3.3V")
    lpw1_l1  = lvpwell_dn.width(0.6.um, euclidian)
    lpw1_l1.output("LPW.1_3.3V", "LPW.1_3.3V : Min. LVPWELL Width. : 0.6µm")
    lpw1_l1.forget

    # Rule LPW.1_5V: Min. LVPWELL Width. is 0.74µm
    logger.info("Executing rule LPW.1_5V")
    lpw1_l1  = lvpwell_dn_56V.width(0.74.um, euclidian)
    lpw1_l1.output("LPW.1_5V", "LPW.1_5V : Min. LVPWELL Width. : 0.74µm")
    lpw1_l1.forget

    if CONNECTIVITY_RULES
    logger.info("CONNECTIVITY_RULES section")

    connected_lvpwell_3p3v, unconnected_lvpwell_3p3v = conn_space(lvpwell_dn, 0.86, 1.4, euclidian)

    connected_lvpwell_5p0v, unconnected_lvpwell_5p0v = conn_space(lvpwell_dn, 0.86, 1.7, euclidian)

    # Rule LPW.2a_3.3V: Min. LVPWELL to LVWELL Space (Inside DNWELL) [Different potential]. is 1.4µm
    logger.info("Executing rule LPW.2a_3.3V")
    lpw2a_l1  = unconnected_lvpwell_3p3v.not_interacting(v5_xtor).not_interacting(dualgate)
    lpw2a_l1.output("LPW.2a_3.3V", "LPW.2a_3.3V : Min. LVPWELL to LVWELL Space (Inside DNWELL) [Different potential]. : 1.4µm")
    lpw2a_l1.forget

    # Rule LPW.2a_5V: Min. LVPWELL to LVPWELL Space (Inside DNWELL) [Different potential]. is 1.7µm
    logger.info("Executing rule LPW.2a_5V")
    lpw2a_l1  = unconnected_lvpwell_5p0v.overlapping(dualgate)
    lpw2a_l1.output("LPW.2a_5V", "LPW.2a_5V : Min. LVPWELL to LVPWELL Space (Inside DNWELL) [Different potential]. : 1.7µm")
    lpw2a_l1.forget

    # Rule LPW.2b_3.3V: Min. LVPWELL to LVPWELL Space [Equi potential]. is 0.86µm
    logger.info("Executing rule LPW.2b_3.3V")
    lpw2b_l1  = connected_lvpwell_3p3v.not_interacting(v5_xtor).not_interacting(dualgate)
    lpw2b_l1.output("LPW.2b_3.3V", "LPW.2b_3.3V : Min. LVPWELL to LVPWELL Space [Equi potential]. : 0.86µm")
    lpw2b_l1.forget

    # Rule LPW.2b_5V: Min. LVPWELL to LVPWELL Space [Equi potential]. is 0.86µm
    logger.info("Executing rule LPW.2b_5V")
    lpw2b_l1  = connected_lvpwell_5p0v.overlapping(dualgate)
    lpw2b_l1.output("LPW.2b_5V", "LPW.2b_5V : Min. LVPWELL to LVPWELL Space [Equi potential]. : 0.86µm")
    lpw2b_l1.forget

    else
    logger.info("CONNECTIVITY_RULES disabled section")

    # Rule LPW.2a_3.3V_: Min. LVPWELL to LVWELL Space (Inside DNWELL) [Different potential]. is 1.4µm
    logger.info("Executing rule LPW.2a_3.3V_")
    lpw2a_l1  = lvpwell_dn.isolated(1.4.um, euclidian)
    lpw2a_l1.output("LPW.2a_3.3V_", "LPW.2a_3.3V_ : Min. LVPWELL to LVWELL Space (Inside DNWELL) [Different potential]. : 1.4µm")
    lpw2a_l1.forget

    # Rule LPW.2a_5V_: Min. LVPWELL to LVPWELL Space (Inside DNWELL) [Different potential]. is 1.7µm
    logger.info("Executing rule LPW.2a_5V_")
    lpw2a_l1  = lvpwell_dn_56V.isolated(1.7.um, euclidian)
    lpw2a_l1.output("LPW.2a_5V_", "LPW.2a_5V_ : Min. LVPWELL to LVPWELL Space (Inside DNWELL) [Different potential]. : 1.7µm")
    lpw2a_l1.forget

    end #CONNECTIVITY_RULES

    # Rule LPW.3_3.3V: Min. DNWELL enclose LVPWELL. is 2.5µm
    logger.info("Executing rule LPW.3_3.3V")
    lpw3_l1 = dnwell.enclosing(lvpwell_dn, 2.5.um, euclidian).polygons(0.001)
    lpw3_l2 = lvpwell_dn.not(dnwell)
    lpw3_l = lpw3_l1.or(lpw3_l2)
    lpw3_l.output("LPW.3", "LPW.3 : Min. DNWELL enclose LVPWELL. : 2.5µm")
    lpw3_l1.forget
    lpw3_l2.forget
    lpw3_l.forget

    # Rule LPW.4: If LVPWELL is used as resistor, it must be covered by RES_MK (for LVS
    ## purpose). Width of the resistor determined by LVPWELL. Length by COMP-
    ## to-COMP space. RES_MK length shall be coinciding with resistor length
    ## (Touching COMP each side) and width covering the width of LVPWELL.
    logger.info("Executing rule LPW.4")
    res_lpw = lvpwell_dn.interacting(res_mk)
    res_lpw_cont = lvpwell_dn.not(res_mk)

    lpw4_l1 = res_lpw.not_interacting(pcomp)
    lpw4_l2 = res_lpw.interacting(poly2)
    lpw4_l3 = lvpwell_dn.interacting(res_lpw_cont, 2..2)
    lpw4_l = lpw4_l1.or(lpw4_l2).or(lpw4_l3)
    lpw4_l.output("LPW.4", "LPW.4 : If LVPWELL is used as resistor, it must be covered by RES_MK (for LVS
    purpose). Width of the resistor determined by LVPWELL. Length by COMP-to-COMP space. RES_MK length shall be coinciding with resistor length
    (Touching COMP each side) and width covering the width of LVPWELL.")

    # Rule LPW.5: LVPWELL resistors must be enclosed by DNWELL.
    logger.info("Executing rule LPW.5")
    lpw5_l1 = lvpwell_dn.and(res_mk).not(dnwell)
    lpw5_l1.output("LPW.5", "LPW.5_3.3V : LVPWELL resistors must be enclosed by DNWELL.")
    lpw5_l1.forget

    # Rule LPW.11: Min. (LVPWELL outside DNWELL) space to DNWELL. is 1.5µm
    logger.info("Executing rule LPW.11")
    lpw11_l1  = lvpwell_out.separation(dnwell, 1.5.um, euclidian)
    lpw11_l1.output("LPW.11", "LPW.11 : Min. (LVPWELL outside DNWELL) space to DNWELL. : 1.5µm")
    lpw11_l1.forget

    # Rule LPW.12: LVPWELL cannot overlap with Nwell.
    logger.info("Executing rule LPW.12")
    lpw12_l1 = lvpwell_out.and(nwell)
    lpw12_l1.output("LPW.12", "LPW.12 : LVPWELL cannot overlap with Nwell.")
    lpw12_l1.forget
end #FEOL

