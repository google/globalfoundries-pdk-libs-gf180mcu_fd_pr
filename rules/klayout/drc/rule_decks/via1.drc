################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

if BEOL
    #================================================
    #----------------------via1----------------------
    #================================================

    # Rule V1.1: Min/max Via1 size . is 0.26µm
    logger.info("Executing rule V1.1")
    v11_l1 = via1.edges.without_length(0.26.um).extended(0, 0, 0.001, 0.001)
    v11_l1.output("V1.1", "V1.1 : Min/max Via1 size . : 0.26µm")
    v11_l1.forget

    # Rule V1.2a: min. via1 spacing is 0.26µm
    logger.info("Executing rule V1.2a")
    v12a_l1  = via1.space(0.26.um, euclidian)
    v12a_l1.output("V1.2a", "V1.2a : min. via1 spacing : 0.26µm")
    v12a_l1.forget

   
    # Rule V1.2b: Via1 Space in 4x4 or larger via1 array is 0.36µm
    logger.info("Executing rule V1.2b")
    poss_4_4_via1 = via1.sized(0.18, "square_limit").merged.sized(-0.18, "square_limit")
    via1_4x4_loc = poss_4_4_via1.not_interacting(poss_4_4_via1.edges.with_length(nil, 2.115))
    selected_via1 = via1.interacting(via1_4x4_loc)
    via1b_l1  = selected_via1.space(0.36.um, euclidian)
    via1b_l1.output("V1.2b", "V1.2b : Via1 Space in 4x4 or larger via1 array : 0.36µm")
    via1b_l1.forget
    poss_4_4_via1.forget
    via1_4x4_loc.forget
    selected_via1.forget

    
    # Rule V1.3a: metal1  overlap of via1.
    logger.info("Executing rule V1.3a")
    v13a_l1 = via1.not(metal1)
    v13a_l1.output("V1.3a", "V1.3a : metal1 overlap of via1 >= 0.0")
    v13a_l1.forget
    
    

    # rule V1.3b is not a DRC check
    # Rule V1.3c: metal1 (< 0.34um) end-of-line overlap. is 0.06µm
    logger.info("Executing rule V1.3c")
    v1p3c_cond = metal1.width(0.34.um + 1.dbu).with_length(0.28.um,nil,both)
    v1p3c_eol = metal1.edges.with_length(nil, 0.34.um).interacting(v1p3c_cond.first_edges).interacting(v1p3c_cond.second_edges).not(v1p3c_cond.first_edges).not(v1p3c_cond.second_edges)
    v1p3c_l1 = via1.edges.enclosed(v1p3c_eol, 0.06.um, projection)
    v1p3c_l1.output("V1.3c", "V1.3c : metal1 (< 0.34um) end-of-line overlap. : 0.06µm")
    v1p3c_l1.forget
    v1p3c_cond.forget
    v1p3c_eol.forget
        
    logger.info("Executing rule V1.3d")
    via1_3d_cond_edges = via1.edges.not_outside(via1.enclosed(metal1, 0.04.um, projection).edges)
    via1_3d_check_corner = via1_3d_cond_edges.extended_in(0.002.um)
    via1_3d_check = via1.edges.interacting(via1_3d_check_corner).not(via1_3d_cond_edges)
    via1_cond_corner = via1_3d_cond_edges.width(0.002.um, angle_limit(135)).polygons
    via1_3d_l1 = via1_3d_check.enclosed(metal1.edges, 0.06.um, projection).polygons
    via1_3d_l2 = via1.interacting(via1_cond_corner)
    via1_3d_l = via1_3d_l1.or(via1_3d_l2)
    via1_3d_l.output("V1.3d", "V1.3d : If metal1 overlap via1 by < 0.04um on one side, adjacent metal1 edges overlap. : 0.06µm")
    via1_3d_l.forget
    via1_3d_l2.forget
    via1_3d_l1.forget
    via1_3d_cond_edges.forget
    via1_3d_check_corner.forget
    via1_cond_corner.forget
    via1_3d_check.forget

    # rule V1.3e is not a DRC check

    # Rule V1.4a: metal2 overlap of via1.
    logger.info("Executing rule V1.4a")
    via1_4a_l1 = via1.enclosed(metal2, 0.01.um, euclidian).polygons(0.001)
    via1_4a_l2 = via1.not(metal2)
    via1_4a_l = via1_4a_l1.or(via1_4a_l2)
    via1_4a_l.output("V1.4a", "V1.4a : metal2 overlap of via1 >= 0.01 um")
    via1_4a_l1.forget
    via1_4a_l2.forget
    via1_4a_l.forget

    # Rule V1.4b: metal2 (< 0.34um) end-of-line overlap. is 0.06µm
    logger.info("Executing rule V1.4b")
    v1p4b_cond = metal2.width(0.34.um + 1.dbu).with_length(0.28.um,nil,both)
    v1p4b_eol = metal2.edges.with_length(nil, 0.34.um).interacting(v1p4b_cond.first_edges).interacting(v1p4b_cond.second_edges).not(v1p4b_cond.first_edges).not(v1p4b_cond.second_edges)
    v1p4b_l1 = via1.edges.enclosed(v1p4b_eol, 0.06.um, projection)
    v1p4b_l1.output("V1.4b", "V1.4p : metal2 (< 0.34um) end-of-line overlap. : 0.06µm")
    v1p4b_l1.forget
    v1p4b_cond.forget
    v1p4b_eol.forget
        
    logger.info("Executing rule V1.4c")
    via1_4c_cond_edges = via1.edges.not_outside(via1.enclosed(metal2, 0.04.um, projection).edges)
    via1_4c_check_corner = via1_4c_cond_edges.extended_in(0.002.um)
    via1_4c_check = via1.edges.interacting(via1_4c_check_corner).not(via1_4c_cond_edges)
    via1_4c_cond_corner = via1_4c_cond_edges.width(0.002.um, angle_limit(135)).polygons
    via1_4c_l1 = via1_4c_check.enclosed(metal2.edges, 0.06.um, projection).polygons
    via1_4c_l2 = via1.interacting(via1_4c_cond_corner)
    via1_4c_l = via1_4c_l1.or(via1_4c_l2)
    via1_4c_l.output("V1.3d", "V1.3d : If metal2 overlap via1 by < 0.04um on one side, adjacent metal2 edges overlap. : 0.06µm")
    via1_4c_l.forget
    via1_4c_l2.forget
    via1_4c_l1.forget
    via1_4c_cond_edges.forget
    via1_4c_check_corner.forget
    via1_4c_cond_corner.forget
    via1_4c_check.forget
    
end #BEOL
