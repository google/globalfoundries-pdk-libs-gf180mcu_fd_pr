################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

if BEOL
    if METAL_LEVEL == "6LM"
        #================================================
        #----------------------via5----------------------
        #================================================

        # Rule V5.1: Min/max Via1 size . is 0.26µm
        logger.info("Executing rule V5.1")
        v51_l1 = via5.edges.without_length(0.26.um).extended(0, 0, 0.001, 0.001)
        v51_l1.output("V5.1", "V5.1 : Min/max Via1 size . : 0.26µm")
        v51_l1.forget

        # Rule V5.2a: min. via5 spacing is 0.26µm
        logger.info("Executing rule V5.2a")
        v52a_l1  = via5.space(0.26.um, euclidian)
        v52a_l1.output("V5.2a", "V5.2a : min. via5 spacing : 0.26µm")
        v52a_l1.forget

    
        # Rule V5.2b: Via1 Space in 4x4 or larger via5 array is 0.36µm
        logger.info("Executing rule V5.2b")
        poss_4_4_via5 = via5.sized(0.18, "square_limit").merged.sized(-0.18, "square_limit")
        via5_4x4_loc = poss_4_4_via5.not_interacting(poss_4_4_via5.edges.with_length(nil, 2.115))
        selected_via5 = via5.interacting(via5_4x4_loc)
        via5b_l1  = selected_via5.space(0.36.um, euclidian)
        via5b_l1.output("V5.2b", "V5.2b : Via1 Space in 4x4 or larger via5 array : 0.36µm")
        via5b_l1.forget
        poss_4_4_via5.forget
        via5_4x4_loc.forget
        selected_via5.forget

        
        # Rule V5.3a: metal5  overlap of via5.
        logger.info("Executing rule V5.3a")
        v53a_l1 = via5.not(metal5)
        v53a_l2 = via5.enclosed(metal5, 0.01.um, euclidian).polygons(0.001)
        v53a_l = v53a_l1.or(v53a_l2)
        v53a_l1.output("V5.3a", "V5.3a : metal5 overlap of via5 >= 0.01")
        v53a_l1.forget
        v53a_l2.forget
        v53a_l.forget
        
        

        # rule V5.3b is not a DRC check
        # Rule V5.3c: metal5 (< 0.34um) end-of-line overlap. is 0.06µm
        logger.info("Executing rule V5.3c")
        v5p3c_cond = metal5.width(0.34.um + 1.dbu).with_length(0.28.um,nil,both)
        v5p3c_eol = metal5.edges.with_length(nil, 0.34.um).interacting(v5p3c_cond.first_edges).interacting(v5p3c_cond.second_edges).not(v5p3c_cond.first_edges).not(v5p3c_cond.second_edges)
        v5p3c_l1 = via5.edges.enclosed(v5p3c_eol, 0.06.um, projection)
        v5p3c_l1.output("V5.3c", "V5.3c : metal5 (< 0.34um) end-of-line overlap. : 0.06µm")
        v5p3c_l1.forget
        v5p3c_cond.forget
        v5p3c_eol.forget
            
        logger.info("Executing rule V5.3d")
        via5_3d_cond_edges = via5.edges.not_outside(via5.enclosed(metal5, 0.04.um, projection).edges)
        via5_3d_check_corner = via5_3d_cond_edges.extended_in(0.002.um)
        via5_3d_check = via5.edges.interacting(via5_3d_check_corner).not(via5_3d_cond_edges)
        via5_cond_corner = via5_3d_cond_edges.width(0.002.um, angle_limit(135)).polygons
        via5_3d_l1 = via5_3d_check.enclosed(metal5.edges, 0.06.um, projection).polygons
        via5_3d_l2 = via5.interacting(via5_cond_corner)
        via5_3d_l = via5_3d_l1.or(via5_3d_l2)
        via5_3d_l.output("V5.3d", "V5.3d : If metal5 overlap via5 by < 0.04um on one side, adjacent metal5 edges overlap. : 0.06µm")
        via5_3d_l.forget
        via5_3d_l2.forget
        via5_3d_l1.forget
        via5_3d_cond_edges.forget
        via5_3d_check_corner.forget
        via5_cond_corner.forget
        via5_3d_check.forget

        # rule V5.3e is not a DRC check

        # Rule V5.4a: metaltop overlap of via5.
        logger.info("Executing rule V5.4a")
        via5_4a_l1 = via5.enclosed(metaltop, 0.01.um, euclidian).polygons(0.001)
        via5_4a_l2 = via5.not(metaltop)
        via5_4a_l = via5_4a_l1.or(via5_4a_l2)
        via5_4a_l.output("V5.4a", "V5.4a : metaltop overlap of via5 >= 0.01 um")
        via5_4a_l1.forget
        via5_4a_l2.forget
        via5_4a_l.forget

        # Rule V5.4b: metaltop (< 0.34um) end-of-line overlap. is 0.06µm
        logger.info("Executing rule V5.4b")
        v5p4b_cond = metaltop.width(0.34.um + 1.dbu).with_length(0.28.um,nil,both)
        v5p4b_eol = metaltop.edges.with_length(nil, 0.34.um).interacting(v5p4b_cond.first_edges).interacting(v5p4b_cond.second_edges).not(v5p4b_cond.first_edges).not(v5p4b_cond.second_edges)
        v5p4b_l1 = via5.edges.enclosed(v5p4b_eol, 0.06.um, projection)
        v5p4b_l1.output("V5.4b", "V5.4p : metaltop (< 0.34um) end-of-line overlap. : 0.06µm")
        v5p4b_l1.forget
        v5p4b_cond.forget
        v5p4b_eol.forget
            
        logger.info("Executing rule V5.4c")
        via5_4c_cond_edges = via5.edges.not_outside(via5.enclosed(metaltop, 0.04.um, projection).edges)
        via5_4c_check_corner = via5_4c_cond_edges.extended_in(0.002.um)
        via5_4c_check = via5.edges.interacting(via5_4c_check_corner).not(via5_4c_cond_edges)
        via5_4c_cond_corner = via5_4c_cond_edges.width(0.002.um, angle_limit(135)).polygons
        via5_4c_l1 = via5_4c_check.enclosed(metaltop.edges, 0.06.um, projection).polygons
        via5_4c_l2 = via5.interacting(via5_4c_cond_corner)
        via5_4c_l = via5_4c_l1.or(via5_4c_l2)
        via5_4c_l.output("V5.3d", "V5.3d : If metaltop overlap via5 by < 0.04um on one side, adjacent metaltop edges overlap. : 0.06µm")
        via5_4c_l.forget
        via5_4c_l2.forget
        via5_4c_l1.forget
        via5_4c_cond_edges.forget
        via5_4c_check_corner.forget
        via5_4c_cond_corner.forget
        via5_4c_check.forget
    end # metal stack
end #BEOL
