################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################


#================================================
#------------MIM CAPACITOR OPTION A -------------
#================================================

if MIM_OPTION == "A"
    logger.info("MIM Capacitor Option A section")
    
    mim_virtual = fusetop.sized(1.06.um).and(metal2.interacting(fusetop))
    # Rule MIM.1: Minimum MiM bottom plate spacing to the bottom plate metal (whether adjacent MiM or routing metal). is 1.2µm
    logger.info("Executing rule MIM.1")
    mim1_l1 = metal2.separation(mim_virtual ,transparent, 1.2.um).polygons(0.001)
    mim1_l1.output("MIM.1", "MIM.1 : Minimum MiM bottom plate spacing to the bottom plate metal (whether adjacent MiM or routing metal). : 1.2µm")
    mim1_l1.forget
    
    # Rule MIM.2: Minimum MiM bottom plate overlap of Via2 layer. [This is applicable for via2 within 1.06um oversize of FuseTop layer (referenced to virtual bottom plate)]. is 0.4µm
    logger.info("Executing rule MIM.2")
    mim2_l1 = metal2.enclosing(via2.overlapping(mim_virtual), 0.4.um, euclidian).polygons(0.001)
    mim2_l2 = via2.overlapping(mim_virtual).not_outside(metal2).not(metal2)
    mim2_l  = mim2_l1.or(mim2_l2)
    mim2_l.output("MIM.2", "MIM.2 : Minimum MiM bottom plate overlap of Via2 layer. [This is applicable for via2 within 1.06um oversize of FuseTop layer (referenced to virtual bottom plate)]. : 0.4µm")
    mim2_l1.forget
    mim2_l2.forget
    mim2_l.forget
    
    # Rule MIM.3: Minimum MiM bottom plate overlap of Top plate.
    logger.info("Executing rule MIM.3")
    mim3_l1 = mim_virtual.enclosing(fusetop,0.6.um).polygons(0.001).or(fusetop.not_inside(mim_virtual))
    mim3_l1.output("MIM.3", "MIM.3 : Minimum MiM bottom plate overlap of Top plate.")
    mim3_l1.forget
    
    mim_virtual.forget
    
    # Rule MIM.4: Minimum MiM top plate (FuseTop) overlap of Via2. is 0.4µm
    logger.info("Executing rule MIM.4")
    mim4_l1 = fusetop.enclosing(via2, 0.4.um, euclidian).polygons(0.001)
    mim4_l2 = via2.not_outside(fusetop).not(fusetop)
    mim4_l  = mim4_l1.or(mim4_l2)
    mim4_l.output("MIM.4", "MIM.4 : Minimum MiM top plate (FuseTop) overlap of Via2. : 0.4µm")
    mim4_l1.forget
    mim4_l2.forget
    mim4_l.forget
    
    # Rule MIM.5: Minimum spacing between top plate and the Via2 connecting to the bottom plate. is 0.4µm
    logger.info("Executing rule MIM.5")
    mim5_l1  = fusetop.separation(via2.interacting(metal2), 0.4.um, euclidian).polygons(0.001)
    mim5_l1.output("MIM.5", "MIM.5 : Minimum spacing between top plate and the Via2 connecting to the bottom plate. : 0.4µm")
    mim5_l1.forget
    
    # Rule MIM.6: Minimum spacing between unrelated top plates. is 0.6µm
    logger.info("Executing rule MIM.6")
    mim6_l1  = fusetop.space(0.6.um, euclidian).polygons(0.001)
    mim6_l1.output("MIM.6", "MIM.6 : Minimum spacing between unrelated top plates. : 0.6µm")
    mim6_l1.forget
    
    # Rule MIM.7: Min FuseTop enclosure by CAP_MK.
    logger.info("Executing rule MIM.7")
    mim7_l1 = fusetop.not_inside(cap_mk)
    mim7_l1.output("MIM.7", "MIM.7 : Min FuseTop enclosure by CAP_MK.")
    mim7_l1.forget
    
    # Rule MIM.8a: Minimum MIM cap area (defined by FuseTop area) (um2). is 25µm²
    logger.info("Executing rule MIM.8a")
    mim8a_l1  = fusetop.with_area(nil, 25.um)
    mim8a_l1.output("MIM.8a", "MIM.8a : Minimum MIM cap area (defined by FuseTop area) (um2). : 25µm²")
    mim8a_l1.forget
    
    # Rule MIM.8b: Maximum single MIM Cap area (Use multiple MIM caps in parallel connection if bigger capacitors are required) (um2). is 10000µm
    logger.info("Executing rule MIM.8b")
    mim8b_l1 = fusetop.with_area(10000.um,nil).not_in(fusetop.with_area(10000.um))
    mim8b_l1.output("MIM.8b", "MIM.8b : Maximum single MIM Cap area (Use multiple MIM caps in parallel connection if bigger capacitors are required) (um2). : 10000µm")
    mim8b_l1.forget
    
    # Rule MIM.9: Min. via spacing for sea of via on MIM top plate. is 0.5µm
    logger.info("Executing rule MIM.9")
    mim9_l1  = via2.inside(fusetop).space(0.5.um, euclidian).polygons(0.001)
    mim9_l1.output("MIM.9", "MIM.9 : Min. via spacing for sea of via on MIM top plate. : 0.5µm")
    mim9_l1.forget
    
    # Rule MIM.10: (a) There cannot be any Via1 touching MIM bottom plate Metal2. (b) MIM bottom plate Metal2 can only be connected through the higher Via (Via2).
    logger.info("Executing rule MIM.10")
    mim10_l1 = via1.interacting(metal2.interacting(fusetop))
    mim10_l1.output("MIM.10", "MIM.10 : (a) There cannot be any Via1 touching MIM bottom plate Metal2. (b) MIM bottom plate Metal2 can only be connected through the higher Via (Via2).")
    mim10_l1.forget
    
    mim11_large_metal2 = metal2.interacting(fusetop).with_area(10000, nil)
    mim11_large_metal2_violation = polygon_layer
    mim11_large_metal2.data.each do |p|
      mim11_metal2_polygon_layer = polygon_layer
      mim11_metal2_polygon_layer.data.insert(p)
      fuse_in_polygon = fusetop.and(mim11_metal2_polygon_layer)
      if(fuse_in_polygon.area > 10000)
        mim11_bad_metal2_polygon = mim11_metal2_polygon_layer.interacting(fuse_in_polygon)
        mim11_bad_metal2_polygon.data.each do |b|
          b.num_points > 0 && mim11_large_metal2_violation.data.insert(b)
        end
      end
    end
    # Rule MIM.11: Bottom plate of multiple MIM caps can be shared (for common nodes) as long as total MIM area with that single common plate does not exceed MIM.8b rule. is -µm
    logger.info("Executing rule MIM.11")
    mim11_l1  = mim11_large_metal2_violation
    mim11_l1.output("MIM.11", "MIM.11 : Bottom plate of multiple MIM caps can be shared (for common nodes) as long as total MIM area with that single common plate does not exceed MIM.8b rule. : -µm")
    mim11_l1.forget
    
    mim11_large_metal2.forget
    
    mim11_large_metal2_violation.forget
    
    # rule MIM.12 is not a DRC check
    
    #================================================
    #-------------MIM CAPACITOR OPTION B-------------
    #================================================
    
elsif MIM_OPTION == "B"
    logger.info("MIM Capacitor Option B section")
    
    mimtm_virtual = fusetop.sized(1.06.um).and(topmin1_metal.interacting(fusetop))
    # Rule MIMTM.1: Minimum MiM bottom plate spacing to the bottom plate metal (whether adjacent MiM or routing metal). is 1.2µm
    logger.info("Executing rule MIMTM.1")
    mimtm1_l1 = topmin1_metal.separation(mimtm_virtual ,transparent, 1.2.um).polygons(0.001)
    mimtm1_l1.output("MIMTM.1", "MIMTM.1 : Minimum MiM bottom plate spacing to the bottom plate metal (whether adjacent MiM or routing metal). : 1.2µm")
    mimtm1_l1.forget
    
    # Rule MIMTM.2: Minimum MiM bottom plate overlap of Vian-1 layer. [This is applicable for Vian-1 within 1.06um oversize of FuseTop layer (referenced to virtual bottom plate)]. is 0.4µm
    logger.info("Executing rule MIMTM.2")
    mimtm2_l1 = topmin1_metal.enclosing(top_via.overlapping(mimtm_virtual), 0.4.um, euclidian).polygons(0.001)
    mimtm2_l2 = top_via.overlapping(mimtm_virtual).not_outside(topmin1_metal).not(topmin1_metal)
    mimtm2_l  = mimtm2_l1.or(mimtm2_l2)
    mimtm2_l.output("MIMTM.2", "MIMTM.2 : Minimum MiM bottom plate overlap of Vian-1 layer. [This is applicable for Vian-1 within 1.06um oversize of FuseTop layer (referenced to virtual bottom plate)]. : 0.4µm")
    mimtm2_l1.forget
    mimtm2_l2.forget
    mimtm2_l.forget
    
    # Rule MIMTM.3: Minimum MiM bottom plate overlap of Top plate.
    logger.info("Executing rule MIMTM.3")
    mimtm3_l1 = mimtm_virtual.enclosing(fusetop,0.6.um).polygons(0.001).or(fusetop.not_inside(mimtm_virtual))
    mimtm3_l1.output("MIMTM.3", "MIMTM.3 : Minimum MiM bottom plate overlap of Top plate.")
    mimtm3_l1.forget
    
    mimtm_virtual.forget
    
    # Rule MIMTM.4: Minimum MiM top plate (FuseTop) overlap of Vian-1. is 0.4µm
    logger.info("Executing rule MIMTM.4")
    mimtm4_l1 = fusetop.enclosing(top_via, 0.4.um, euclidian).polygons(0.001)
    mimtm4_l2 = top_via.not_outside(fusetop).not(fusetop)
    mimtm4_l  = mimtm4_l1.or(mimtm4_l2)
    mimtm4_l.output("MIMTM.4", "MIMTM.4 : Minimum MiM top plate (FuseTop) overlap of Vian-1. : 0.4µm")
    mimtm4_l1.forget
    mimtm4_l2.forget
    mimtm4_l.forget
    
    # Rule MIMTM.5: Minimum spacing between top plate and the Vian-1 connecting to the bottom plate. is 0.4µm
    logger.info("Executing rule MIMTM.5")
    mimtm5_l1  = fusetop.separation(top_via.interacting(topmin1_metal), 0.4.um, euclidian).polygons(0.001)
    mimtm5_l1.output("MIMTM.5", "MIMTM.5 : Minimum spacing between top plate and the Vian-1 connecting to the bottom plate. : 0.4µm")
    mimtm5_l1.forget
    
    # Rule MIMTM.6: Minimum spacing between unrelated top plates. is 0.6µm
    logger.info("Executing rule MIMTM.6")
    mimtm6_l1  = fusetop.space(0.6.um, euclidian).polygons(0.001)
    mimtm6_l1.output("MIMTM.6", "MIMTM.6 : Minimum spacing between unrelated top plates. : 0.6µm")
    mimtm6_l1.forget
    
    # Rule MIMTM.7: Min FuseTop enclosure by CAP_MK.
    logger.info("Executing rule MIMTM.7")
    mimtm7_l1 = fusetop.not_inside(cap_mk)
    mimtm7_l1.output("MIMTM.7", "MIMTM.7 : Min FuseTop enclosure by CAP_MK.")
    mimtm7_l1.forget
    
    # Rule MIMTM.8a: Minimum MIM cap area (defined by FuseTop area) (um2). is 25µm²
    logger.info("Executing rule MIMTM.8a")
    mimtm8a_l1  = fusetop.with_area(nil, 25.um)
    mimtm8a_l1.output("MIMTM.8a", "MIMTM.8a : Minimum MIM cap area (defined by FuseTop area) (um2). : 25µm²")
    mimtm8a_l1.forget
    
    # Rule MIMTM.8b: Maximum single MIM Cap area (Use multiple MIM caps in parallel connection if bigger capacitors are required) (um2). is 10000µm
    logger.info("Executing rule MIMTM.8b")
    mimtm8b_l1 = fusetop.with_area(10000.um,nil).not_in(fusetop.with_area(10000.um))
    mimtm8b_l1.output("MIMTM.8b", "MIMTM.8b : Maximum single MIM Cap area (Use multiple MIM caps in parallel connection if bigger capacitors are required) (um2). : 10000µm")
    mimtm8b_l1.forget
    
    # Rule MIMTM.9: Min. Via (Vian-1) spacing for sea of Via on MIM top plate. is 0.5µm
    logger.info("Executing rule MIMTM.9")
    mimtm9_l1  = top_via.inside(fusetop).space(0.5.um, euclidian).polygons(0.001)
    mimtm9_l1.output("MIMTM.9", "MIMTM.9 : Min. Via (Vian-1) spacing for sea of Via on MIM top plate. : 0.5µm")
    mimtm9_l1.forget
    
    # Rule MIMTM.10: (a) There cannot be any Vian-2 touching MIM bottom plate Metaln-1. (b) MIM bottom plate Metaln-1 can only be connected through the higher Via (Vian-1).
    logger.info("Executing rule MIMTM.10")
    mimtm10_l1 = topmin1_via.interacting(topmin1_metal.interacting(fusetop))
    mimtm10_l1.output("MIMTM.10", "MIMTM.10 : (a) There cannot be any Vian-2 touching MIM bottom plate Metaln-1. (b) MIM bottom plate Metaln-1 can only be connected through the higher Via (Vian-1).")
    mimtm10_l1.forget
    
    mimtm11_large_topmin1_metal = topmin1_metal.interacting(fusetop).with_area(10000, nil)
    mimtm11_large_topmin1_metal_violation = polygon_layer
    mimtm11_large_topmin1_metal.data.each do |p|
      mimtm11_topmin1_metal_polygon_layer = polygon_layer
      mimtm11_topmin1_metal_polygon_layer.data.insert(p)
      fuse_in_polygon = fusetop.and(mimtm11_topmin1_metal_polygon_layer)
      if(fuse_in_polygon.area > 10000)
        mimtm11_bad_topmin1_metal_polygon = mimtm11_topmin1_metal_polygon_layer.interacting(fuse_in_polygon)
        mimtm11_bad_topmin1_metal_polygon.data.each do |b|
          b.num_points > 0 && mimtm11_large_topmin1_metal_violation.data.insert(b)
        end
      end
    end
    # Rule MIMTM.11: Bottom plate of multiple MIM caps can be shared (for common nodes) as long as total MIM area with that single common plate does not exceed MIMTM.8b rule. is -µm
    logger.info("Executing rule MIMTM.11")
    mimtm11_l1  = mimtm11_large_topmin1_metal_violation
    mimtm11_l1.output("MIMTM.11", "MIMTM.11 : Bottom plate of multiple MIM caps can be shared (for common nodes) as long as total MIM area with that single common plate does not exceed MIMTM.8b rule. : -µm")
    mimtm11_l1.forget
    
    mimtm11_large_topmin1_metal.forget
    
    mimtm11_large_topmin1_metal_violation.forget
    
    # rule MIMTM.12 is not a DRC check
    
else
  logger.info("No MIM Capacitor Option Selected section")  
end #MIM_OPTION

    