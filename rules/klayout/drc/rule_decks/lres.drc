################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################


if FEOL
    #================================================
    #----------------N+ POLY RESISTOR----------------
    #================================================

    lres_poly = poly2.and(nplus).interacting(sab).interacting(res_mk)
    # Rule LRES.1: Minimum width of Poly2 resistor. is 0.8µm
    logger.info("Executing rule LRES.1")
    lres1_l1  = lres_poly.width(0.8.um, euclidian).polygons(0.001)
    lres1_l1.output("LRES.1", "LRES.1 : Minimum width of Poly2 resistor. : 0.8µm")
    lres1_l1.forget

    # Rule LRES.2: Minimum space between Poly2 resistors. is 0.4µm
    logger.info("Executing rule LRES.2")
    lres2_l1  = lres_poly.isolated(0.4.um, euclidian).polygons(0.001)
    lres2_l1.output("LRES.2", "LRES.2 : Minimum space between Poly2 resistors. : 0.4µm")
    lres2_l1.forget

    # Rule LRES.3: Minimum space from Poly2 resistor to COMP.
    logger.info("Executing rule LRES.3")
    lres3_l1 = lres_poly.separation(comp, 0.6.um, euclidian).polygons(0.001).or(comp.not_outside(lres_poly))
    lres3_l1.output("LRES.3", "LRES.3 : Minimum space from Poly2 resistor to COMP.")
    lres3_l1.forget

    # Rule LRES.4: Minimum space from Poly2 resistor to unrelated Poly2. is 0.6µm
    logger.info("Executing rule LRES.4")
    lres4_l1  = lres_poly.separation(poly2.not_interacting(sab), 0.6.um, euclidian).polygons(0.001)
    lres4_l1.output("LRES.4", "LRES.4 : Minimum space from Poly2 resistor to unrelated Poly2. : 0.6µm")
    lres4_l1.forget

    # Rule LRES.5: Minimum Nplus implant overlap of Poly2 resistor. is 0.3µm
    logger.info("Executing rule LRES.5")
    lres5_l1 = nplus.enclosing(poly2.and(nplus).interacting(sab).interacting(res_mk), 0.3.um, euclidian).polygons(0.001)
    lres5_l2 = poly2.and(nplus).interacting(sab).interacting(res_mk).not_outside(nplus).not(nplus)
    lres5_l  = lres5_l1.or(lres5_l2)
    lres5_l.output("LRES.5", "LRES.5 : Minimum Nplus implant overlap of Poly2 resistor. : 0.3µm")
    lres5_l1.forget
    lres5_l2.forget
    lres5_l.forget

    # Rule LRES.6: Minimum salicide block overlap of Poly2 resistor in width direction. is 0.28µm
    logger.info("Executing rule LRES.6")
    lres6_l1 = sab.enclosing(lres_poly,0.28.um).polygons(0.001)
    lres6_l1.output("LRES.6", "LRES.6 : Minimum salicide block overlap of Poly2 resistor in width direction. : 0.28µm")
    lres6_l1.forget

    cont_lres7 = contact.inside(poly2.and(nplus).interacting(sab).interacting(res_mk))
    # Rule LRES.7: Space from salicide block to contact on Poly2 resistor.
    logger.info("Executing rule LRES.7")
    lres7_l1 = cont_lres7.separation(sab,0.22.um).polygons(0.001).or(cont_lres7.interacting(sab))
    lres7_l1.output("LRES.7", "LRES.7 : Space from salicide block to contact on Poly2 resistor.")
    lres7_l1.forget

    cont_lres7.forget

    # rule LRES.8 is not a DRC check

    mk_lres9 = res_mk.edges.not(poly2.and(nplus).and(sab).edges).inside_part(poly2)
    # Rule LRES.9a: Nplus Poly2 resistor shall be covered by RES_MK marking. RES_MK length shall be coincide with resistor length (Defined by SAB length) and width covering the width of Poly2.
    logger.info("Executing rule LRES.9a")
    lres9a_l1 = res_mk.interacting(lres_poly).interacting(mk_lres9)
    lres9a_l1.output("LRES.9a", "LRES.9a : Nplus Poly2 resistor shall be covered by RES_MK marking. RES_MK length shall be coincide with resistor length (Defined by SAB length) and width covering the width of Poly2. ")
    lres9a_l1.forget

    mk_lres9.forget

    lres9b = res_mk.with_area(15000.01.um,nil).in(res_mk.interacting(res_mk.edges.with_length(80.01.um,nil)))
    # Rule LRES.9b: If the size of single RES_MK mark layer is greater than 15000um2 and both side (X and Y) are greater than 80um. then the minimum spacing to adjacent RES_MK layer. is 20µm
    logger.info("Executing rule LRES.9b")
    lres9b_l1 = res_mk.interacting(lres_poly).drc(separation(lres9b) < 20.um).polygons(0.001)
    lres9b_l1.output("LRES.9b", "LRES.9b : If the size of single RES_MK mark layer is greater than 15000um2 and both side (X and Y) are greater than 80um. then the minimum spacing to adjacent RES_MK layer. : 20µm")
    lres9b_l1.forget

    lres9b.forget

    lres_poly.forget

end #FEOL

